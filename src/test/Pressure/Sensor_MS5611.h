// Sensor_MS5611.h
//

#ifndef __SENSOR_MS5611_H__
#define __SENSOR_MS5611_H__

#include <Arduino.h>
#include <Wire.h>
#include "CriticalSection.h"


/* the pressure normalized sea level pressure */  
#define MS5611_BASE_SEA_PRESSURE 		(1013.25)

#define MS5611_ADDRESS 						(0x77)

#define MS5611_CMD_RESET 					(0x1E)
#define MS5611_CMD_READ_PROM 			(0xA2)
#define MS5611_CMD_CONV_D1 				(0x44)
#define MS5611_CMD_CONV_D2 				(0x54)
#define MS5611_CMD_ADC_READ 				(0x00)

#define MS5611_RESET_DELAY 					(3)
#define MS5611_CONV_DELAY 					(10)

#define MS5611_STEP_READY						(0)
#define MS5611_STEP_READ_TEMP 			(1)
#define MS5611_STEP_READ_PRESSURE 		(2)

/* the measure period need to be greater than 8.22 ms */
/* the library use a 1024 prescale so the time unit is 1024/F_CPU */
/* the INTERRUPT_COMPARE can't be greater than 255 */
/* but a greater value give less code interrupts */
/* the final period is 1024/F_CPU * INTERRUPT_COMPARE */
/* in seconds */

#define MS5611_INTERRUPT_COMPARE		(600) // F_CPU : 72MHz --> 600 ~= 8.5ms, 590 ~= 8.39ms

#define MS5611_TIMER_PRESCALER			(1024)
#define MS5611_TIMER_CHANNEL				(1)
#define MS5611_TIMER_ID							(2)

#define MS5611_INTERRUPT_START_DELAY (1000)

#define MS5611_READING_TIMEOUT			(20)


///////////////////////////////////////////////////////////////////////////////////////////////
//

void IRAM_ATTR _BaroUpdateTimer();



///////////////////////////////////////////////////////////////////////////////////////////////
// class Sensor_MS5611

class Sensor_MS5611
{
	friend void IRAM_ATTR _BaroUpdateTimer();
	
public:
	Sensor_MS5611(CriticalSeciton & _cs, TwoWire & _i2c);
	
public:
	void						begin();
	void						end();
	
	int						available();
	
	int						read(float * p, float * t);
	
	float						getTemperature();
	float						getPressure();
	
	void						startConvert();
	void						convertNext();
	
public:
	static float				getAltitude(float p, float seaLevel = MS5611_BASE_SEA_PRESSURE); // 1013.25
	
protected:
	void						resetBaro();
	
	uint16_t					getPROMValue(int address, uint32_t timeout = MS5611_READING_TIMEOUT);
	uint32_t					getDigitalValue(uint32_t timeout = MS5611_READING_TIMEOUT);
	
	void						convertD1(); // read temperature
	void						convertD2(); // read pressure
	
	void						updateBaro();

protected:
	// to store measures generated by interrupts
	volatile uint32_t 		d1i;
	volatile uint32_t 		d2i;

	// measure status
	volatile int				baroState; // CONVERT_D1 or CONVERT_D2
	volatile int				baroUpdated;

private:
	//PROM factors
	uint16_t 				c1, c2, c3, c4, c5, c6;

	// compensated values
	float 					compensatedTemperature;
	float 					compensatedPressure;

	//
	CriticalSeciton &	mCriticalSection;
	TwoWire &			mWire;
};

// inline members
inline float Sensor_MS5611::getTemperature()
	{ return compensatedTemperature; }

inline float Sensor_MS5611::getPressure()
	{ return compensatedPressure; }

inline int Sensor_MS5611::available()
	{ return baroUpdated; }
	

#endif // __SENSOR_MS5611_H__
